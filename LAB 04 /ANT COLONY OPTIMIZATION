import random
import math
cities = [(0, 0), (1, 5), (5, 2), (6, 6), (8, 3)]
num_cities = len(cities)
num_ants = 3
max_iter = 50

alpha = 1      
beta = 2     
evaporation = 0.5
pheromone_deposit = 100
def distance(a, b):
    x1, y1 = cities[a]
    x2, y2 = cities[b]
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

pheromone = [[1 for _ in range(num_cities)] for _ in range(num_cities)]

def choose_next_city(current_city, visited):
    probabilities = []
    for city in range(num_cities):
        if city in visited:
            probabilities.append(0)
        else:
            tau = pheromone[current_city][city] ** alpha
            eta = (1 / distance(current_city, city)) ** beta
            probabilities.append(tau * eta)
    total = sum(probabilities)
    if total == 0:
        return random.choice([c for c in range(num_cities) if c not in visited])
    probabilities = [p / total for p in probabilities]
    return random.choices(range(num_cities), weights=probabilities)[0]

def path_length(path):
    length = 0
    for i in range(len(path) - 1):
        length += distance(path[i], path[i+1])
    length += distance(path[-1], path[0])  
    return length

best_path = None
best_length = float('inf')

for iteration in range(max_iter):
    all_paths = []
    for _ in range(num_ants):
        start = random.randint(0, num_cities - 1)
        path = [start]
        visited = set(path)
        while len(path) < num_cities:
            next_city = choose_next_city(path[-1], visited)
            path.append(next_city)
            visited.add(next_city)
        length = path_length(path)
        all_paths.append((path, length))
        if length < best_length:
            best_length = length
            best_path = path

    for i in range(num_cities):
        for j in range(num_cities):
            pheromone[i][j] *= (1 - evaporation)

    for path, length in all_paths:
        for i in range(num_cities):
            from_city = path[i]
            to_city = path[(i + 1) % num_cities]
            pheromone[from_city][to_city] += pheromone_deposit / length

print("Best path found:", best_path)
print("Best path length:", round(best_length, 2))
